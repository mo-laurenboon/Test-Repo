name: Auto Release on Production Update
on:
  push:
    branches:
    - production
  workflow˙dispatch:
permissions:
  contents: write 
jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0 
    - name: Get latest version
      id: get˙version
      run: |
        git fetch -- tags
        LATEST_TAG=$(git tag -l ”v*” | sort -V | tail -n 1)

        if [ -z ”$LATEST˙TAG” ]; then
          NEW_VERSION=”v$(date +'%Y.%m.%d')”
          echo ”First release”
        else
          NUMBER=${LATEST_TAG#v}
          NEW_NUMBER=$((NUMBER + 1))
          NEW_VERSION =”v${NEW_NUMBER}”
          echo ”Previous version: $LATEST_TAG”
        fi

        echo ”New version : $NEW_VERSION ”
        echo ”version = $NEW_VERSION” >> $GITHUB_OUTPUT
    - name: Generate release notes
      id: release˙notes
      run: |
        LAST_TAG=$(git tag -l ”v*” | sort -V | tail -n 1)

        if [ -n ”$LAST_TAG” ]; then
          COMMITS=$(git log ${LAST_TAG˝..HEAD --pretty=format:”- %s (%h)” --no-merges)
        else
          COMMITS=$(git log --pretty=format:” - %s (%h)” --no-merges | head -n 20)
        fi

        cat > release˙notes . md ¡¡ EOF
        **Release Date:** $(date +'%Y-%m-%d %H:%M:%S UTC')
        $COMMITS
        - London air quality report
        - Paris air quality report
        - Combined JSON data file
        View the published data at: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/EOF
        cat release_notes.md
    - name: Create GitHub Release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        VERSION =”${{ steps.get_version.outputs.version }}”
        gh release create ” $VERSION ” \
          -- title ”Release $VERSION ” \
          -- notes-file release_notes.md \
          -- target production
    - name: Upload content as release assets
      env:
        GH_TOKEN : ${{ secrets.GITHUB_TOKEN }}
      run: |
        VERSION =”${{ steps.get_version.outputs.version }}"
        cd content
        zip -r ../air-quality-data-${VERSION}.zip .
        cd ..
        gh release upload ”$VERSION” air-quality-data-${VERSION}. zip